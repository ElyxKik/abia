// Initialisation de l'application
document.addEventListener('DOMContentLoaded', function() {
  // Masquer l'écran de chargement s'il existe
  const loadingScreen = document.getElementById('loading-screen');
  if (loadingScreen) {
    loadingScreen.style.display = 'none';
  }
  
  // Récupération des éléments du DOM
  const themeToggle = document.getElementById('theme-toggle');
  const languageToggle = document.getElementById('language-toggle');
  const settingsButton = document.getElementById('settings-button');
  const newChatButton = document.getElementById('new-chat-button');
  const sendMessageButton = document.getElementById('send-message');
  const chatInput = document.getElementById('chat-input');
  const sidebar = document.getElementById('sidebar');
  
  // Récupération des vues
  const dashboardView = document.getElementById('dashboard-view');
  const chatView = document.getElementById('chat-view');
  
  // Afficher directement la vue de chat au démarrage
  if (chatView) {
    chatView.style.display = 'flex';
  }
  
  // Récupération des liens de navigation
  const navLinks = document.querySelectorAll('a[href^="#"]');
  
  // Initialisation du thème
  initTheme();
  
  // Initialisation de la langue
  initLanguage();
  
  // Écouteurs d'événements
  themeToggle.addEventListener('click', toggleTheme);
  languageToggle.addEventListener('click', toggleLanguage);
  settingsButton.addEventListener('click', openSettings);
  sendMessageButton.addEventListener('click', sendMessage);
  newChatButton.addEventListener('click', startNewChat);
  
  // Écouteurs d'événements pour les boutons de commande rapide
  const cmdCreateFolder = document.getElementById('cmd-create-folder');
  const cmdListFiles = document.getElementById('cmd-list-files');
  const cmdImportExcel = document.getElementById('cmd-import-excel');
  const cmdImportDocument = document.getElementById('cmd-import-document');
  const cmdWriteMail = document.getElementById('cmd-write-mail');
  const cmdClassifyDocs = document.getElementById('cmd-classify-docs');
  
  if (cmdCreateFolder) cmdCreateFolder.addEventListener('click', () => handleCommandClick('create-folder'));
  if (cmdListFiles) cmdListFiles.addEventListener('click', () => handleCommandClick('list-files'));
  if (cmdImportExcel) cmdImportExcel.addEventListener('click', () => handleCommandClick('import-excel'));
  if (cmdImportDocument) cmdImportDocument.addEventListener('click', () => handleCommandClick('import-document'));
  if (cmdWriteMail) cmdWriteMail.addEventListener('click', () => handleCommandClick('write-mail'));
  if (cmdClassifyDocs) cmdClassifyDocs.addEventListener('click', () => handleCommandClick('classify-docs'));
  
  // Écouteur d'événement pour la touche Entrée dans le champ de saisie
  chatInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
    
    // Déclencheur pour tester les boutons d'action (appuyer sur F2)
    if (e.key === 'F2') {
      e.preventDefault();
      console.log('Test des boutons d\'action déclenché...');
      testActionButtons();
    }
  });
  
  // Écouteurs d'événements pour les liens de navigation
  navLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const target = link.getAttribute('href').substring(1);
      navigateTo(target);
      
      // Marquer le lien actif
      navLinks.forEach(l => l.classList.remove('active'));
      link.classList.add('active');
    });
  });
  
  // Écouteurs d'événements pour l'API Electron
  if (window.api) {
    window.api.onNewConversation(() => {
      startNewChat();
    });
    
    window.api.onOpenSettings(() => {
      openSettings();
    });
    
    window.api.onToggleDarkMode((isDarkMode) => {
      setTheme(isDarkMode ? 'dark' : 'light');
    });
    
    window.api.onChangeLanguage((language) => {
      setLanguage(language);
    });
  }
  
  // Fonction pour initialiser le thème
  function initTheme() {
    if (window.api) {
      window.api.getStoreValue('darkMode', false)
        .then(isDarkMode => {
          setTheme(isDarkMode ? 'dark' : 'light');
        })
        .catch(() => {
          // Fallback pour le développement sans Electron
          const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
          setTheme(prefersDarkMode ? 'dark' : 'light');
        });
    } else {
      // Fallback pour le développement sans Electron
      const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
      setTheme(prefersDarkMode ? 'dark' : 'light');
    }
  }
  
  // Fonction pour définir le thème
  function setTheme(theme) {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }
  
  // Fonction pour basculer le thème
  function toggleTheme() {
    const isDarkMode = document.documentElement.classList.contains('dark');
    const newTheme = isDarkMode ? 'light' : 'dark';
    
    setTheme(newTheme);
    
    if (window.api) {
      window.api.setStoreValue('darkMode', newTheme === 'dark');
    }
  }
  
  // Fonction pour initialiser la langue
  function initLanguage() {
    if (window.api) {
      window.api.getStoreValue('language', 'fr')
        .then(language => {
          setLanguage(language);
        })
        .catch(() => {
          setLanguage('fr');
        });
    } else {
      setLanguage('fr');
    }
  }
  
  // Fonction pour définir la langue
  function setLanguage(language) {
    languageToggle.textContent = language.toUpperCase();
    document.documentElement.lang = language;
  }
  
  // Fonction pour basculer la langue
  function toggleLanguage() {
    const currentLanguage = languageToggle.textContent.toLowerCase();
    const newLanguage = currentLanguage === 'fr' ? 'en' : 'fr';
    
    setLanguage(newLanguage);
    
    if (window.api) {
      window.api.setStoreValue('language', newLanguage);
    }
  }
  
  // Déclaration de la fonction navigateTo à l'intérieur de la fonction anonyme
  // pour qu'elle ait accès aux variables dashboardView et chatView
  function navigateTo(target) {
    console.log(`Navigation vers: ${target}`);
    // Vérifier que les éléments existent
    if (!dashboardView || !chatView) {
      console.error('Les éléments de vue n\'existent pas');
      return;
    }
    
    // Cacher toutes les vues
    dashboardView.classList.add('hidden');
    chatView.style.display = 'none';
    
    // Afficher la vue cible
    switch (target) {
      case 'dashboard':
        dashboardView.classList.remove('hidden');
        break;
      case 'chat':
        // Afficher la vue de chat avec flex-col
        chatView.style.display = 'flex';
        break;
      default:
        // Par défaut, afficher le tableau de bord
        dashboardView.classList.remove('hidden');
    }
  }
  
  // Fonction pour démarrer une nouvelle conversation
  function startNewChat() {
    // Vider l'historique de chat
    const chatMessages = chatView.querySelector('.overflow-y-auto');
    
    // Garder uniquement le message d'accueil
    const welcomeMessage = chatMessages.firstElementChild;
    chatMessages.innerHTML = '';
    if (welcomeMessage) {
      chatMessages.appendChild(welcomeMessage);
    }
    
    // Créer une nouvelle session si l'API est disponible
    if (window.api) {
      window.api.createNewSession()
        .then(sessionId => {
          console.log(`Nouvelle session créée: ${sessionId}`);
        })
        .catch(error => {
          console.error('Erreur lors de la création d\'une nouvelle session:', error);
        });
    }
    
    // Naviguer vers la vue de chat
    navigateTo('chat');
    
    // Mettre à jour les liens de navigation
    navLinks.forEach(link => {
      if (link.getAttribute('href') === '#chat') {
        link.classList.add('active');
      } else {
        link.classList.remove('active');
      }
    });
    
    // Vider le champ de saisie
    chatInput.value = '';
    
    // Mettre le focus sur le champ de saisie
    chatInput.focus();
  }
  
  // Fonction pour envoyer un message
  function sendMessage() {
    const message = chatInput.value.trim();
    
    if (message) {
      // Vider le champ de saisie
      chatInput.value = '';
      
      // Ajouter le message à la conversation
      addUserMessage(message);
      
      // Traiter le message
      processUserMessage(message);
      
      // Ajuster la hauteur du champ de saisie
      chatInput.style.height = 'auto';
      chatInput.style.height = chatInput.scrollHeight + 'px';
    }
    
    // Note: processUserMessage est déjà appelé plus haut, pas besoin de le rappeler ici
    // Ce code est laissé en commentaire pour référence
    /*
    setTimeout(() => {
      addAIMessage("Je traite votre demande...");
      
      // Simuler le temps de traitement
      setTimeout(() => {
        // processUserMessage(message); // Retiré pour éviter un double appel
      }, 1000);
    }, 500);
    */
  }
  
  // Fonction pour ajouter un message utilisateur à la conversation
  function addUserMessage(message) {
    const chatMessages = document.getElementById('chat-messages');
    
    const messageElement = document.createElement('div');
    messageElement.className = 'chat-message chat-message-user';
    
    messageElement.innerHTML = `
      <div class="flex items-start justify-end">
        <div class="ml-3 bg-primary-600 dark:bg-primary-500 text-white rounded-lg px-4 py-2 max-w-3/4">
          <p class="text-sm">${escapeHTML(message)}</p>
        </div>
        <div class="flex-shrink-0 h-8 w-8 rounded-full bg-primary-100 dark:bg-primary-900 flex items-center justify-center text-primary-600 dark:text-primary-400">
          <i class="fas fa-user"></i>
        </div>
      </div>
    `;
    
    chatMessages.appendChild(messageElement);
    
    // Faire défiler vers le bas
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }
  
  // Fonction pour ajouter un message de l'IA au chat
  function addAIMessage(message, actions = []) {
    const chatMessages = document.getElementById('chat-messages');
    const messageElement = document.createElement('div');
    messageElement.className = 'chat-message chat-message-ai';
    
    // Préparer le contenu du message
    let messageContent;
    
    // Si le message est déjà du HTML (commence par <), l'utiliser tel quel
    if (typeof message === 'string' && message.startsWith('<')) {
      messageContent = message;
    } else {
      // Sinon, traiter le message pour détecter les chemins absolus et le formater
      const formattedMessage = typeof message === 'string' ? processPathsInMessage(message) : message;
      messageContent = `<p class="text-sm">${formattedMessage}</p>`;
    }
    
    // Générer le HTML pour les boutons d'action
    let actionsHTML = '';
    if (Array.isArray(actions) && actions.length > 0) {
      actionsHTML = `
        <div class="mt-3 flex flex-wrap gap-2 action-buttons">
          ${actions.map((action, index) => `
            <button class="btn ${action.primary ? 'btn-primary' : 'btn-outline'} text-sm py-1" data-action="${escapeHTML(action.text)}" data-action-index="${index}">
              ${action.icon ? `<i class="fas fa-${action.icon} mr-1"></i>` : ''} ${escapeHTML(action.text)}
            </button>
          `).join('')}
        </div>
      `;
    }
    
    // Assembler le HTML complet du message
    messageElement.innerHTML = `
      <div class="flex items-start">
        <div class="flex-shrink-0 h-8 w-8 rounded-full bg-primary-100 dark:bg-primary-900/30 flex items-center justify-center text-primary-600 dark:text-primary-400">
          <i class="fas fa-robot"></i>
        </div>
        <div class="ml-3">
          ${messageContent}
          ${actionsHTML}
        </div>
      </div>
    `;
    
    chatMessages.appendChild(messageElement);
    
    // Ajouter des gestionnaires d'événements pour les boutons d'action
    if (Array.isArray(actions) && actions.length > 0) {
      // Attendre que le DOM soit mis à jour avant d'ajouter les gestionnaires d'événements
      setTimeout(() => {
        const actionButtons = messageElement.querySelectorAll('.action-buttons button');
        console.log(`Nombre de boutons d'action trouvés: ${actionButtons.length}`);
        
        actionButtons.forEach((button, idx) => {
          button.addEventListener('click', () => {
            const actionText = button.getAttribute('data-action');
            const actionIndex = parseInt(button.getAttribute('data-action-index'));
            const action = actions[actionIndex];
            
            console.log(`Bouton d'action cliqué (${idx}):`, actionText, action);
            
            // Exécuter l'action en fonction du texte du bouton
            handleActionButtonClick(actionText, action);
          });
        });
      }, 0);
    }
    
    // Ajouter des gestionnaires d'événements pour les boutons d'ouverture de dossier
    const openFolderButtons = messageElement.querySelectorAll('.open-folder-btn');
    openFolderButtons.forEach(button => {
      button.addEventListener('click', () => {
        const folderPath = button.getAttribute('data-path');
        if (folderPath && window.api) {
          // Afficher un message de chargement
          button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Ouverture...';
          button.disabled = true;
          
          // Ouvrir le dossier via l'API Electron
          window.api.openFolder(folderPath)
            .then(result => {
              if (result.success) {
                button.innerHTML = '<i class="fas fa-check"></i> Ouvert';
                setTimeout(() => {
                  button.innerHTML = '<i class="fas fa-folder-open"></i> Ouvrir';
                  button.disabled = false;
        }
        
        loadingElement.innerHTML = `
          <div class="flex items-start">
            <div class="flex-shrink-0 h-8 w-8 rounded-full bg-primary-100 dark:bg-primary-900/30 flex items-center justify-center text-primary-600 dark:text-primary-400 agent-icon thinking">
              <i class="fas fa-${agentIcon}"></i>
            </div>
            <div class="ml-3">
              <div class="flex items-center">
                <span class="text-xs text-neutral-500 dark:text-neutral-400 mr-2">${agentName}</span>
                <div class="loading-animation">
                  <div class="dot"></div>
                  <div class="dot"></div>
                  <div class="dot"></div>
                  <div class="dot"></div>
                  <div class="dot"></div>
                </div>
              </div>
              <p class="text-sm mt-1"><span class="loading-text">${thinkingText}</span></p>
            </div>
          </div>
        `;
        
        chatMessages.appendChild(loadingElement);
        
        // Faire défiler vers le bas
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // Appeler l'API pour traiter le message avec l'ID de requête unique
        return window.api.processQuery(message, { requestId, skipCache: true });
      })
      .then(response => {
        // Remplacer le message de chargement par la réponse
        if (loadingElement && loadingElement.parentNode) {
          loadingElement.parentNode.removeChild(loadingElement);
        }
        
        // Ajouter la réponse avec les actions si disponibles
        if (response && response.message) {
          addAIMessage(response.message, response.actions || []);
        } else if (response && response.content) {
          // Compatibilité avec l'ancien format de réponse
          addAIMessage(response.content, response.actions || []);
        } else if (response && response.error) {
          // Gérer les erreurs retournées dans la réponse
          console.error('Erreur dans la réponse:', response.error);
          addAIMessage(`Désolé, une erreur s'est produite: ${response.error}`);
        } else {
          console.error('Réponse invalide:', response);
          addAIMessage("Désolé, je n'ai pas pu traiter votre demande.");
        }
      })
      .catch(error => {
        console.error('Erreur lors du traitement du message:', error);
        
        // Transformer l'animation de chargement en message d'erreur
        if (loadingElement && loadingElement.parentNode) {
          // Changer l'animation pour indiquer une erreur
          const iconElement = loadingElement.querySelector('.agent-icon');
          if (iconElement) {
            iconElement.classList.remove('thinking');
            iconElement.innerHTML = '<i class="fas fa-exclamation-triangle"></i>';
          }
          
          // Remplacer l'animation par un message d'erreur
          const loadingAnimation = loadingElement.querySelector('.loading-animation');
          if (loadingAnimation) {
            loadingAnimation.remove();
          }
          
          const loadingText = loadingElement.querySelector('.loading-text');
          if (loadingText) {
            loadingText.textContent = "Erreur";
            loadingText.classList.remove('loading-text');
          // Transformer l'animation de chargement en message d'erreur
          if (loadingElement && loadingElement.parentNode) {
            // Changer l'animation pour indiquer une erreur
            const iconElement = loadingElement.querySelector('.agent-icon');
            if (iconElement) {
              iconElement.classList.remove('thinking');
              iconElement.innerHTML = '<i class="fas fa-exclamation-triangle"></i>';
            }
            
            // Remplacer l'animation par un message d'erreur
            const loadingAnimation = loadingElement.querySelector('.loading-animation');
            if (loadingAnimation) {
              loadingAnimation.remove();
            }
            
            const loadingText = loadingElement.querySelector('.loading-text');
            if (loadingText) {
              loadingText.textContent = "Erreur";
              loadingText.classList.remove('loading-text');
            }
            
            // Ajouter le message d'erreur
            const messageContainer = loadingElement.querySelector('.ml-3');
            if (messageContainer) {
              const errorMessage = document.createElement('p');
              errorMessage.className = 'text-sm mt-2 text-red-500 dark:text-red-400';
              errorMessage.textContent = "Désolé, une erreur s'est produite lors du traitement de votre demande. Veuillez réessayer.";
              messageContainer.appendChild(errorMessage);
              
              // Ajouter un bouton pour réessayer
              const retryButton = document.createElement('button');
              retryButton.className = 'btn btn-sm btn-outline mt-2';
              retryButton.innerHTML = '<i class="fas fa-redo mr-1"></i> Réessayer';
              retryButton.addEventListener('click', () => {
                // Supprimer le message d'erreur
                loadingElement.parentNode.removeChild(loadingElement);
                // Réessayer avec le même message
                processUserMessage(message);
              });
              messageContainer.appendChild(retryButton);
            }
          } else {
            // Fallback si l'élément de chargement n'existe plus
            addAIMessage("Désolé, une erreur s'est produite lors du traitement de votre demande. Veuillez réessayer.");
          }
        });
    } else {
      // Mode de démonstration sans API (pour le développement)
      const lowercaseMessage = message.toLowerCase();
      
      if (lowercaseMessage.includes('excel') || lowercaseMessage.includes('fichier') || lowercaseMessage.includes('tableau')) {
        // Utiliser la fonction simplifiée pour afficher les options Excel
        showExcelOptions();
      } else if (lowercaseMessage.includes('lettre') || lowercaseMessage.includes('courrier') || lowercaseMessage.includes('mail')) {
        addAIMessage("Je peux vous aider à rédiger une lettre professionnelle. Quel type de lettre souhaitez-vous créer ?", [
          { text: "Lettre de motivation", icon: "file-alt", primary: true },
          { text: "Lettre administrative", icon: "envelope", primary: false },
          { text: "Réclamation", icon: "exclamation-circle", primary: false }
        ]);
      } else if (lowercaseMessage.includes('pdf') || lowercaseMessage.includes('document') || lowercaseMessage.includes('word')) {
        // Utiliser la fonction simplifiée pour afficher les options Document
        showDocumentOptions();
      } else {
        addAIMessage("Je suis là pour vous aider avec diverses tâches. Je peux analyser des fichiers Excel, générer des lettres, ou extraire des informations de documents. Que souhaitez-vous faire aujourd'hui ?");
      }
    }
  }
  
  // Fonction pour formater le message (support Markdown basique)
  function formatMessage(message) {
    // Vérifier que le message est une chaîne de caractères
    if (typeof message !== 'string') {
      return message;
    }
    
    // Échapper les caractères HTML
    let formattedMessage = escapeHTML(message);
    
    // Formatage basique (gras, italique, code)
    formattedMessage = formattedMessage
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/`(.*?)`/g, '<code>$1</code>');
    
    // Convertir les sauts de ligne
    formattedMessage = formattedMessage.replace(/\n/g, '<br>');
    
    return formattedMessage;
  }
  
  /**
   * Fonction pour traiter les chemins absolus dans un message et ajouter des boutons pour ouvrir les dossiers
   * @param {string} message - Le message à traiter
   * @returns {string} - Le message formaté avec des boutons pour ouvrir les dossiers
   */
  function processPathsInMessage(message) {
    // Vérifier que le message est une chaîne de caractères
    if (typeof message !== 'string') {
      return message;
    }
    
    // Formater d'abord le message (support Markdown basique)
    let formattedMessage = formatMessage(message);
    
    // Détecter les chemins absolus dans le message
    // Recherche les chemins qui commencent par / ou C:/ ou D:/ etc.
    const pathRegex = /(chemin absolu:\s*)([\w\-\/\.:\\]+)/gi;
    
    // Remplacer les chemins absolus par des liens cliquables
    formattedMessage = formattedMessage.replace(pathRegex, (match, prefix, path) => {
      // Nettoyer le chemin (enlever les guillemets, etc.)
      const cleanPath = path.replace(/["']/g, '').trim();
      
      // Créer un bouton pour ouvrir le dossier
      return `${prefix}<span class="path-display">${escapeHTML(cleanPath)}</span> 
        <button class="btn btn-xs btn-outline-secondary open-folder-btn" data-path="${escapeHTML(cleanPath)}">
          <i class="fas fa-folder-open"></i> Ouvrir
        </button>`;
    });
    
    return formattedMessage;
  }
  
  // Fonction pour échapper les caractères HTML
  function escapeHTML(text) {
    return text
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }
  
  // Fonction pour ouvrir les paramètres
  function openSettings() {
    alert('Paramètres non implémentés');
  }
  
  // Fonction pour tester les boutons d'action
  function testActionButtons() {
    console.log('Test des boutons d\'action...');
    
    // Ajouter un message avec des boutons d'action pour tester
    showExcelOptions();
    
    // Ajouter un message avec du HTML pour tester
    setTimeout(() => {
      showDocumentOptions();
    }, 500);
  }
  
  // Fonction simplifiée pour afficher les options Excel
  function showExcelOptions() {
    const chatMessages = document.getElementById('chat-messages');
    const messageElement = document.createElement('div');
    messageElement.className = 'chat-message chat-message-ai';
    
    messageElement.innerHTML = `
      <div class="flex items-start">
        <div class="flex-shrink-0 h-8 w-8 rounded-full bg-primary-100 dark:bg-primary-900/30 flex items-center justify-center text-primary-600 dark:text-primary-400">
          <i class="fas fa-robot"></i>
        </div>
        <div class="ml-3">
          <p class="text-sm">Pour analyser un fichier Excel, vous pouvez l'importer et je vous aiderai à extraire les informations importantes. Que souhaitez-vous faire avec ce fichier ?</p>
          <div class="mt-3 flex flex-wrap gap-2 action-buttons">
            <button class="btn btn-primary text-sm py-1" data-action="Importer un fichier">
              <i class="fas fa-file-upload mr-1"></i> Importer un fichier
            </button>
            <button class="btn btn-outline text-sm py-1" data-action="Utiliser l'Agent Excel">
              <i class="fas fa-table mr-1"></i> Utiliser l'Agent Excel
            </button>
          </div>
        </div>
      </div>
    `;
    
    chatMessages.appendChild(messageElement);
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    // Ajouter des gestionnaires d'événements pour les boutons
    const buttons = messageElement.querySelectorAll('.action-buttons button');
    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const action = button.getAttribute('data-action');
        console.log('Action Excel cliquée:', action);
        handleActionButtonClick(action);
      });
    });
  }
  
  // Fonction simplifiée pour afficher les options Document
  function showDocumentOptions() {
    const chatMessages = document.getElementById('chat-messages');
    const messageElement = document.createElement('div');
    messageElement.className = 'chat-message chat-message-ai';
    
    messageElement.innerHTML = `
      <div class="flex items-start">
        <div class="flex-shrink-0 h-8 w-8 rounded-full bg-primary-100 dark:bg-primary-900/30 flex items-center justify-center text-primary-600 dark:text-primary-400">
          <i class="fas fa-robot"></i>
        </div>
        <div class="ml-3">
          <p class="text-sm">Je peux analyser vos documents PDF ou Word pour en extraire les informations clés. Souhaitez-vous importer un document ?</p>
          <div class="mt-3 flex flex-wrap gap-2 action-buttons">
            <button class="btn btn-primary text-sm py-1" data-action="Importer un document">
              <i class="fas fa-file-upload mr-1"></i> Importer un document
            </button>
            <button class="btn btn-outline text-sm py-1" data-action="Utiliser l'Agent Documents">
              <i class="fas fa-file-alt mr-1"></i> Utiliser l'Agent Documents
            </button>
          </div>
        </div>
      </div>
    `;
    
    chatMessages.appendChild(messageElement);
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    // Ajouter des gestionnaires d'événements pour les boutons
    const buttons = messageElement.querySelectorAll('.action-buttons button');
    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const action = button.getAttribute('data-action');
        console.log('Action Document cliquée:', action);
        handleActionButtonClick(action);
      });
    });
  }
  
  // Fonction pour gérer les clics sur les boutons d'action
  function handleActionButtonClick(actionText, action) {
    console.log('Action clickée:', actionText, action);
    
    // Gérer les différentes actions en fonction du texte du bouton
    if (actionText.includes('Importer un fichier')) {
      console.log('Appel de importExcelFile()...');
      importExcelFile();
    } else if (actionText.includes('Utiliser l\'Agent Excel')) {
      useExcelAgent();
    } else if (actionText.includes('Lettre de motivation')) {
      createMotivationLetter();
    } else if (actionText.includes('Lettre administrative')) {
      createAdministrativeLetter();
    } else if (actionText.includes('Réclamation')) {
      createComplaintLetter();
    } else if (actionText.includes('Importer un document')) {
      console.log('Appel de importDocument()...');
      importDocument();
    } else if (actionText.includes('Utiliser l\'Agent Documents')) {
      useDocumentAgent();
    } else if (actionText.includes('Créer un graphique')) {
      createExcelChart();
    } else if (actionText.includes('Analyser les tendances')) {
      analyzeTrends();
    } else if (actionText.includes('Extraire des données spécifiques')) {
      extractSpecificData();
    } else if (actionText.includes('Essayer un autre fichier')) {
      importExcelFile();
    } else if (actionText.includes('Voir la documentation')) {
      showExcelDocumentation();
    } else {
      console.log('Action non reconnue:', actionText);
    }
  }
  
  // Fonction pour importer un fichier Excel
  function importExcelFile() {
    // Créer un élément input de type file
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = '.xlsx,.xls,.csv';
    
    // Ajouter un écouteur d'événement pour le changement de fichier
    fileInput.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (file) {
        // Informer l'utilisateur que le fichier a été sélectionné
        addUserMessage(`J'ai sélectionné le fichier Excel: ${file.name}`);
        
        // Afficher un message de chargement
        const loadingMessage = addAIMessage("J'analyse votre fichier Excel...");
        
        // Appeler l'API pour analyser le fichier Excel
        if (window.api) {
          window.api.processExcelFile(file.path)
            .then(result => {
              // Supprimer le message de chargement
              if (loadingMessage && loadingMessage.parentNode) {
                loadingMessage.parentNode.removeChild(loadingMessage);
              }
              
              // Afficher les résultats
              if (result && result.content) {
                // Utiliser le contenu et les actions fournis par l'API
                addAIMessage(result.content, result.actions || []);
              } else {
                // Fallback au cas où result.content n'existe pas
                let displayContent = "J'ai analysé votre fichier Excel.";
                
                // Essayer d'extraire des informations utiles de l'objet result
                if (typeof result === 'object') {
                  try {
                    displayContent += "\n\n" + JSON.stringify(result, null, 2);
                  } catch (e) {
                    console.error("Erreur lors de la conversion de l'objet result en JSON:", e);
                  }
                } else if (result) {
                  displayContent += "\n\n" + result;
                }
                
                // Ajouter une question pour guider l'utilisateur
                displayContent += "\n\nQue souhaitez-vous faire avec ces données ?";
                
                // Afficher le message avec des boutons d'action par défaut
                addAIMessage(displayContent, [
                  { text: "Extraire des données spécifiques", icon: "table", primary: true },
                  { text: "Créer un graphique", icon: "chart-bar", primary: false },
                  { text: "Analyser les tendances", icon: "chart-line", primary: false }
                ]);
              }
            })
            .catch(error => {
              // Supprimer le message de chargement
              if (loadingMessage && loadingMessage.parentNode) {
                loadingMessage.parentNode.removeChild(loadingMessage);
              }
              
              addAIMessage(`Désolé, je n'ai pas pu analyser votre fichier Excel. Erreur: ${error.message}`);
            });
        } else {
          // Simulation pour le développement sans Electron
          setTimeout(() => {
            // Supprimer le message de chargement
            if (loadingMessage && loadingMessage.parentNode) {
              loadingMessage.parentNode.removeChild(loadingMessage);
            }
            
            addAIMessage("J'ai analysé votre fichier Excel. Voici un résumé des données:\n\n- Nombre de feuilles: 3\n- Nombre total de lignes: 150\n- Nombre total de colonnes: 8\n- Principales colonnes: Nom, Date, Montant, Catégorie\n\nQue souhaitez-vous faire avec ces données ?", [
              { text: "Extraire des données spécifiques", icon: "table", primary: true },
              { text: "Créer un graphique", icon: "chart-bar", primary: false },
              { text: "Analyser les tendances", icon: "chart-line", primary: false }
            ]);
          }, 1500);
        }
      }
    });
    
    // Déclencher le clic sur l'input file
    fileInput.click();
  }
  
  // Fonction pour utiliser l'agent Excel
  function useExcelAgent() {
    addUserMessage("Je souhaite utiliser l'Agent Excel pour analyser mes données.");
    processUserMessage("Je souhaite utiliser l'Agent Excel pour analyser mes données.");
  }
  
  // Fonction pour créer un graphique à partir des données Excel
  function createExcelChart() {
    const userQuery = "Je voudrais créer un graphique à partir des données de mon fichier Excel.";
    addUserMessage(userQuery);
    
    // Afficher un message de chargement
    const loadingMessage = addAIMessage("Je prépare des options pour créer un graphique basé sur vos données Excel...");
    
    // Traiter la demande en utilisant l'API
    if (window.api) {
      window.api.processQuery(userQuery)
        .then(response => {
          // Supprimer le message de chargement
          if (loadingMessage && loadingMessage.parentNode) {
            loadingMessage.parentNode.removeChild(loadingMessage);
          }
          
          // Afficher la réponse
          if (response && response.content) {
            addAIMessage(response.content, response.actions || []);
          } else {
            // Message par défaut si aucune réponse structurée n'est disponible
            addAIMessage("Pour créer un graphique, j'aurais besoin de savoir quelles colonnes vous souhaitez visualiser. Pouvez-vous me donner plus de détails sur le type de graphique souhaité (barres, lignes, camembert) et les données à inclure ?", [
              { text: "Graphique en barres", icon: "chart-bar", primary: true },
              { text: "Graphique en lignes", icon: "chart-line", primary: false },
              { text: "Graphique circulaire", icon: "chart-pie", primary: false }
            ]);
          }
        })
        .catch(error => {
          console.error('Erreur lors du traitement de la demande:', error);
          
          // Supprimer le message de chargement
          if (loadingMessage && loadingMessage.parentNode) {
            loadingMessage.parentNode.removeChild(loadingMessage);
          }
          
          // Afficher un message d'erreur
          addAIMessage("Désolé, j'ai rencontré un problème lors de la préparation de votre graphique. Veuillez réessayer ou fournir plus de détails sur ce que vous souhaitez visualiser.");
        });
    } else {
      // Mode de démonstration sans API
      setTimeout(() => {
        // Supprimer le message de chargement
        if (loadingMessage && loadingMessage.parentNode) {
          loadingMessage.parentNode.removeChild(loadingMessage);
        }
        
        // Afficher une réponse simulée
        addAIMessage("Pour créer un graphique basé sur vos données Excel, j'aurais besoin de savoir quelles colonnes vous souhaitez visualiser. Quels types de données voulez-vous inclure dans votre graphique ?", [
          { text: "Graphique en barres", icon: "chart-bar", primary: true },
          { text: "Graphique en lignes", icon: "chart-line", primary: false },
          { text: "Graphique circulaire", icon: "chart-pie", primary: false }
        ]);
      }, 1500);
    }
  }
  
  // Fonction pour analyser les tendances dans les données Excel
  function analyzeTrends() {
    const userQuery = "Pouvez-vous analyser les tendances dans mes données Excel ?";
    addUserMessage(userQuery);
    
    // Afficher un message de chargement
    const loadingMessage = addAIMessage("J'analyse les tendances dans vos données Excel...");
    
    // Traiter la demande en utilisant l'API
    if (window.api) {
      window.api.processQuery(userQuery)
        .then(response => {
          // Supprimer le message de chargement
          if (loadingMessage && loadingMessage.parentNode) {
            loadingMessage.parentNode.removeChild(loadingMessage);
          }
          
          // Afficher la réponse
          if (response && response.content) {
            addAIMessage(response.content, response.actions || []);
          } else {
            // Message par défaut si aucune réponse structurée n'est disponible
            addAIMessage("Pour analyser les tendances, j'ai besoin de savoir quelles colonnes contiennent des données temporelles (dates, trimestres, etc.) et quelles mesures vous souhaitez suivre dans le temps. Pouvez-vous me préciser ces informations ?", [
              { text: "Tendance mensuelle", icon: "calendar", primary: true },
              { text: "Comparaison annuelle", icon: "calendar-alt", primary: false },
              { text: "Détails des variations", icon: "chart-line", primary: false }
            ]);
          }
        })
        .catch(error => {
          console.error('Erreur lors de l\'analyse des tendances:', error);
          
          // Supprimer le message de chargement
          if (loadingMessage && loadingMessage.parentNode) {
            loadingMessage.parentNode.removeChild(loadingMessage);
          }
          
          // Afficher un message d'erreur
          addAIMessage("Désolé, j'ai rencontré un problème lors de l'analyse des tendances dans vos données. Veuillez réessayer ou préciser quelles tendances vous intéressent.");
        });
    } else {
      // Mode de démonstration sans API
      setTimeout(() => {
        // Supprimer le message de chargement
        if (loadingMessage && loadingMessage.parentNode) {
          loadingMessage.parentNode.removeChild(loadingMessage);
        }
        
        // Afficher une réponse simulée
        addAIMessage("Basé sur une analyse préliminaire de vos données, je peux étudier les tendances sur différentes périodes. Que voulez-vous examiner plus en détail ?", [
          { text: "Tendance mensuelle", icon: "calendar", primary: true },
          { text: "Comparaison annuelle", icon: "calendar-alt", primary: false },
          { text: "Détails des variations", icon: "chart-line", primary: false }
        ]);
      }, 1500);
    }
  }
  
  // Fonction pour extraire des données spécifiques du fichier Excel
  // Fonction pour afficher la documentation sur les fichiers Excel
  function showExcelDocumentation() {
    const userQuery = "Je voudrais voir la documentation sur les fichiers Excel supportés.";
    addUserMessage(userQuery);
    
    // Message de documentation
    const documentation = `# Documentation sur les fichiers Excel supportés

## Formats acceptés
- .xlsx (Excel 2007+)
- .xls (Excel 97-2003)
- .csv (Valeurs séparées par des virgules)

## Résolution des problèmes courants

### Erreur "Can't find end of central directory"
Cette erreur se produit généralement quand:
- Le fichier Excel est corrompu
- Le fichier n'est pas un véritable fichier Excel (.xlsx)
- Le fichier est protégé par mot de passe

### Solutions possibles
1. Essayez de réenregistrer votre fichier au format .xlsx
2. Assurez-vous que le fichier n'est pas protégé par mot de passe
3. Utilisez le format .csv pour les fichiers qui posent problème

## Conseils d'utilisation
- Les fichiers Excel trop volumineux peuvent prendre plus de temps à analyser
- Assurez-vous que vos données sont bien structurées avec des en-têtes de colonne clairs
- Les premiers onglets du classeur sont analysés en priorité`;
    
    // Afficher la documentation
    addAIMessage(documentation, [
      { text: "Essayer un autre fichier", icon: "file-upload", primary: true },
      { text: "Convertir en CSV", icon: "file-csv", primary: false }
    ]);
  }
  
  function extractSpecificData() {
    const userQuery = "Je voudrais extraire des données spécifiques de mon fichier Excel.";
    addUserMessage(userQuery);
    
    // Afficher un message de chargement
    const loadingMessage = addAIMessage("Je prépare l'extraction de données spécifiques...");
    
    // Traiter la demande en utilisant l'API
    if (window.api) {
      window.api.processQuery(userQuery)
        .then(response => {
          // Supprimer le message de chargement
          if (loadingMessage && loadingMessage.parentNode) {
            loadingMessage.parentNode.removeChild(loadingMessage);
          }
          
          // Afficher la réponse
          if (response && response.content) {
            addAIMessage(response.content, response.actions || []);
          } else {
            // Message par défaut si aucune réponse structurée n'est disponible
            addAIMessage("Pour extraire des données spécifiques, j'ai besoin de savoir quelles informations vous recherchez. Voici les types d'extraction possibles :", [
              { text: "Filtrer les données", icon: "filter", primary: true },
              { text: "Rechercher des valeurs", icon: "search", primary: false },
              { text: "Résumé statistique", icon: "calculator", primary: false }
            ]);
          }
        })
        .catch(error => {
          console.error('Erreur lors de l\'extraction de données:', error);
          
          // Supprimer le message de chargement
          if (loadingMessage && loadingMessage.parentNode) {
            loadingMessage.parentNode.removeChild(loadingMessage);
          }
          
          // Afficher un message d'erreur
          addAIMessage("Désolé, j'ai rencontré un problème lors de la préparation de l'extraction de données. Pouvez-vous préciser quelles données vous souhaitez extraire ?");
        });
    } else {
      // Mode de démonstration sans API
      setTimeout(() => {
        // Supprimer le message de chargement
        if (loadingMessage && loadingMessage.parentNode) {
          loadingMessage.parentNode.removeChild(loadingMessage);
        }
        
        // Afficher une réponse simulée
        addAIMessage("Je peux vous aider à extraire des informations spécifiques de votre fichier Excel. Que souhaitez-vous extraire ?", [
          { text: "Filtrer les données", icon: "filter", primary: true },
          { text: "Rechercher des valeurs", icon: "search", primary: false },
          { text: "Résumé statistique", icon: "calculator", primary: false }
        ]);
      }, 1500);
    }
  }
  
  // Fonction pour créer une lettre de motivation
  function createMotivationLetter() {
    addAIMessage("Pour créer une lettre de motivation, j'ai besoin de quelques informations. Veuillez remplir les champs suivants :", [
      { text: "Utiliser un modèle", icon: "file-alt", primary: true }
    ]);
    
    // Simuler l'affichage d'un formulaire
    setTimeout(() => {
      addAIMessage(`<form class="mt-2 space-y-3">
        <div>
          <label class="block text-sm font-medium">Votre nom complet</label>
          <input type="text" class="mt-1 block w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500" placeholder="Prénom NOM">
        </div>
        <div>
          <label class="block text-sm font-medium">Poste visé</label>
          <input type="text" class="mt-1 block w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500" placeholder="Développeur Web, Chef de projet, etc.">
        </div>
        <div>
          <label class="block text-sm font-medium">Entreprise</label>
          <input type="text" class="mt-1 block w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500" placeholder="Nom de l'entreprise">
        </div>
        <button type="button" class="btn btn-primary w-full">Générer la lettre</button>
      </form>`);
    }, 500);
  }
  
  // Fonction pour créer une lettre administrative
  function createAdministrativeLetter() {
    addAIMessage("Pour créer une lettre administrative, j'ai besoin de quelques informations. Veuillez remplir les champs suivants :", [
      { text: "Utiliser un modèle", icon: "file-alt", primary: true }
    ]);
    
    // Simuler l'affichage d'un formulaire
    setTimeout(() => {
      addAIMessage(`<form class="mt-2 space-y-3">
        <div>
          <label class="block text-sm font-medium">Votre nom complet</label>
          <input type="text" class="mt-1 block w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500" placeholder="Prénom NOM">
        </div>
        <div>
          <label class="block text-sm font-medium">Organisme destinataire</label>
          <input type="text" class="mt-1 block w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500" placeholder="Nom de l'organisme">
        </div>
        <div>
          <label class="block text-sm font-medium">Objet de la lettre</label>
          <input type="text" class="mt-1 block w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500" placeholder="Objet de la lettre">
        </div>
        <button type="button" class="btn btn-primary w-full">Générer la lettre</button>
      </form>`);
    }, 500);
  }
  
  // Fonction pour créer une lettre de réclamation
  function createComplaintLetter() {
    addAIMessage("Pour créer une lettre de réclamation, j'ai besoin de quelques informations. Veuillez remplir les champs suivants :", [
      { text: "Utiliser un modèle", icon: "file-alt", primary: true }
    ]);
    
    // Simuler l'affichage d'un formulaire
    setTimeout(() => {
      addAIMessage(`<form class="mt-2 space-y-3">
        <div>
          <label class="block text-sm font-medium">Votre nom complet</label>
          <input type="text" class="mt-1 block w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500" placeholder="Prénom NOM">
        </div>
        <div>
          <label class="block text-sm font-medium">Entreprise concernée</label>
          <input type="text" class="mt-1 block w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500" placeholder="Nom de l'entreprise">
        </div>
        <div>
          <label class="block text-sm font-medium">Objet de la réclamation</label>
          <input type="text" class="mt-1 block w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500" placeholder="Objet de la réclamation">
        </div>
        <div>
          <label class="block text-sm font-medium">Description du problème</label>
          <textarea class="mt-1 block w-full px-3 py-2 border border-neutral-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500" rows="3" placeholder="Décrivez le problème rencontré"></textarea>
        </div>
        <button type="button" class="btn btn-primary w-full">Générer la lettre</button>
      </form>`);
    }, 500);
  }
  
  // Fonction pour importer un document
  function importDocument() {
    // Créer un élément input de type file
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = '.pdf,.doc,.docx';
    
    // Ajouter un écouteur d'événement pour le changement de fichier
    fileInput.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (file) {
        // Informer l'utilisateur que le fichier a été sélectionné
        addUserMessage(`J'ai sélectionné le document: ${file.name}`);
        
        // Afficher un message de chargement
        const loadingMessage = addAIMessage("J'analyse votre document...");
        
        // Appeler l'API pour analyser le document
        if (window.api) {
          window.api.processDocument(file.path)
            .then(result => {
              // Supprimer le message de chargement
              if (loadingMessage && loadingMessage.parentNode) {
                loadingMessage.parentNode.removeChild(loadingMessage);
              }
              
              // Afficher les résultats
              addAIMessage(`J'ai analysé votre document. Voici un résumé du contenu:\n\n${result.summary}\n\nQue souhaitez-vous faire avec ce document ?`, [
                { text: "Extraire du texte spécifique", icon: "file-alt", primary: true },
                { text: "Générer un résumé plus court", icon: "file-contract", primary: false },
                { text: "Poser des questions sur le document", icon: "question-circle", primary: false }
              ]);
            })
            .catch(error => {
              // Supprimer le message de chargement
              if (loadingMessage && loadingMessage.parentNode) {
                loadingMessage.parentNode.removeChild(loadingMessage);
              }
              
              addAIMessage(`Désolé, je n'ai pas pu analyser votre document. Erreur: ${error.message}`);
            });
        } else {
          // Simulation pour le développement sans Electron
          setTimeout(() => {
            // Supprimer le message de chargement
            if (loadingMessage && loadingMessage.parentNode) {
              loadingMessage.parentNode.removeChild(loadingMessage);
            }
            
            addAIMessage("J'ai analysé votre document. Voici un résumé du contenu:\n\nCe document contient 5 pages avec des informations sur le projet ABIA. Les points clés sont: l'architecture du système, les fonctionnalités principales, et les prochaines étapes de développement.\n\nQue souhaitez-vous faire avec ce document ?", [
              { text: "Extraire du texte spécifique", icon: "file-alt", primary: true },
              { text: "Générer un résumé plus court", icon: "file-contract", primary: false },
              { text: "Poser des questions sur le document", icon: "question-circle", primary: false }
            ]);
          }, 1500);
        }
      }
    });
    
    // Déclencher le clic sur l'input file
    fileInput.click();
  }
  
  // Fonction pour utiliser l'agent Documents
  function useDocumentAgent() {
    addAIMessage("L'Agent Documents est prêt à vous aider. Veuillez importer un document ou me dire ce que vous souhaitez faire.", [
      { text: "Importer un document", icon: "file-upload", primary: true },
      { text: "Créer un nouveau document", icon: "file", primary: false }
    ]);
  }
  
  // Fonction pour gérer les clics sur les boutons de commande rapide
  function handleCommandClick(commandType) {
    console.log(`Commande rapide: ${commandType}`);
    
    // S'assurer que la vue de chat est visible
    if (document.getElementById('chat-view').style.display !== 'flex') {
      // Trouver le lien de navigation vers le chat et simuler un clic
      const chatLink = document.querySelector('a[href="#chat"]');
      if (chatLink) {
        chatLink.click();
      } else {
        // Fallback si le lien n'est pas trouvé
        const dashboardView = document.getElementById('dashboard-view');
        const chatView = document.getElementById('chat-view');
        
        if (dashboardView) dashboardView.classList.add('hidden');
        if (chatView) chatView.style.display = 'flex';
      }
    }
    
    // Vérifier que l'API est disponible
    if (!window.api) {
      addAIMessage("Désolé, je ne peux pas exécuter cette commande car l'API n'est pas disponible.");
      return;
    }
    
    // Définir l'agent actif en fonction du type de commande
    let agentType = 'chat'; // Par défaut
    
    switch (commandType) {
      case 'create-folder':
      case 'list-files':
      case 'classify-docs':
        agentType = 'filesystem';
        break;
        
      case 'import-excel':
        agentType = 'excel';
        break;
        
      case 'import-document':
        agentType = 'document';
        break;
        
      case 'write-mail':
        agentType = 'mail';
        break;
    }
    
    // Définir l'agent actif et exécuter l'action appropriée une fois l'agent activé
    window.api.setActiveAgent(agentType)
      .then(() => {
        console.log(`Agent actif défini sur: ${agentType}`);
        
        // Exécuter l'action appropriée en fonction du type de commande
        switch (commandType) {
          case 'create-folder':
            // Demander à l'utilisateur le nom du dossier à créer
            addAIMessage("Pour créer un nouveau dossier, veuillez me donner le nom que vous souhaitez lui attribuer.", [
              { text: "Créer dans Documents", icon: "folder-plus", primary: true },
              { text: "Créer dans un autre emplacement", icon: "folder-tree", primary: false }
            ]);
            break;
            
          case 'list-files':
            // Demander à l'utilisateur quel dossier lister
            addAIMessage("Je peux vous montrer le contenu d'un dossier. Quel dossier souhaitez-vous explorer ?", [
              { text: "Dossier Documents", icon: "folder-open", primary: true },
              { text: "Dossier ABIA", icon: "folder-open", primary: false }
            ]);
            break;
            
          case 'import-excel':
            // Appeler la fonction d'importation Excel après avoir défini l'agent
            importExcelFile();
            break;
            
          case 'import-document':
            // Appeler la fonction d'importation de document après avoir défini l'agent
            importDocument();
            break;
            
          case 'write-mail':
            // Demander à l'utilisateur quel type de mail rédiger
            addAIMessage("Je peux vous aider à rédiger un mail. Quel type de mail souhaitez-vous créer ?", [
              { text: "Mail professionnel", icon: "envelope", primary: true },
              { text: "Mail personnel", icon: "envelope-open", primary: false },
              { text: "Mail de réclamation", icon: "exclamation-circle", primary: false }
            ]);
            break;
            
          case 'classify-docs':
            // Demander à l'utilisateur quel dossier classer
            addAIMessage("Je peux vous aider à classer automatiquement vos documents par type. Quel dossier contient les documents à classer ?", [
              { text: "Dossier Téléchargements", icon: "download", primary: true },
              { text: "Dossier Documents", icon: "folder", primary: false },
              { text: "Autre dossier", icon: "folder-plus", primary: false }
            ]);
            break;
            
          default:
            // Message par défaut si la commande n'est pas reconnue
            addAIMessage("Désolé, je ne reconnais pas cette commande. Comment puis-je vous aider autrement ?");
        }
      })
      .catch(error => {
        console.error(`Erreur lors de la définition de l'agent ${agentType}:`, error);
        addAIMessage(`Désolé, je n'ai pas pu activer l'agent approprié pour cette commande. Erreur: ${error.message || 'Erreur inconnue'}`);
      });
    
    // Donner le focus au champ de saisie après avoir traité la commande
    document.getElementById('chat-input').focus();
  }

  // Initialisation : afficher le tableau de bord par défaut
  // Appeler navigateTo directement ici plutôt qu'après la fermeture de la fonction anonyme
  navigateTo('dashboard');
});

